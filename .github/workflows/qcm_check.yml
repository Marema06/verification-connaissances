jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. Ollama avec vérification
      - name: Install Ollama (CPU Mode)
        run: |
          curl -fsSL https://ollama.com/install.sh | OLLAMA_NOBLAS=1 sh
          echo "OLLAMA_NOBLAS=1" >> $GITHUB_ENV
          echo "HOME=/github/home" >> $GITHUB_ENV

          nohup ollama serve > ollama.log 2>&1 &
          echo $! > ollama.pid

          for i in {1..15}; do
            if curl -s localhost:11434 >/dev/null; then
              echo "Ollama ready"
              break
            fi
            echo "Waiting for Ollama ($i/15)..."
            sleep 5
          done

      # 2. Téléchargement modèle
      - name: Download CPU-optimized model
        run: |
          ollama pull orca-mini
          ollama list

      # 3. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt gunicorn

      # 4. Flask avec timeout étendu
      - name: Start Flask
        env:
          OLLAMA_BASE_URL: "http://localhost:11434"
          OLLAMA_MODEL: "orca-mini"
          PYTHONUNBUFFERED: 1
        run: |
          nohup gunicorn --timeout 300 --bind 0.0.0.0:5000 --workers 1 app:app > flask.log 2>&1 &
          echo $! > flask.pid

          for i in {1..15}; do
            if curl -s http://localhost:5000/healthz; then
              echo "Flask ready"
              break
            fi
            echo "Waiting for Flask ($i/15)..."
            sleep 5
          done

      # 5. Test avec timeout augmenté
      - name: Test QCM Generation
        run: |
          sudo apt-get install -y jq

          echo "Envoi de la requête POST..."
          RESPONSE_RAW=$(curl --max-time 120 -s -X POST http://localhost:5000/generate_qcm \
            -H "Content-Type: application/json" \
            -d '{"code":"def hello():\\n    print(\\"Hello World\\")"}')

          # ... (reste du test inchangé)

      # 6. Cleanup et logs
      - name: Stop services
        if: always()
        run: |
          # ... (nettoyage existant)

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: |
            ollama.log
            flask.log
