# .github/workflows/qcm_check.yml
name: CI Backend + Frontend

on:
  push:
  workflow_dispatch:

jobs:
  test-qcm-api-and-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.11.1]     # ou 18.x selon votre version locale
        python-version: ['3.10']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # ───────────── Backend ─────────────
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: 📆 Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: 🔐 Write .env
        run: |
          echo "API_SECRET_TOKEN=${{ secrets.API_SECRET_TOKEN }}" > .env
          echo "STUDENT_EMAIL=${{ secrets.STUDENT_EMAIL }}" >> .env
          echo "PROF_EMAIL=${{ secrets.PROF_EMAIL }}" >> .env

      - name: 🚀 Launch Flask
        run: |
          nohup python backend/app.py > flask.log 2>&1 &
          sleep 6

      # ──────────── ngrok ────────────
      - name: 🌍 Install ngrok v3+
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
      - name: 🔑 Auth ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
      - name: 🌐 Start ngrok tunnel
        run: |
          nohup ngrok http 5000 > ngrok.log 2>&1 &
          sleep 6
      - name: 📡 Expose public URL
        id: ngrok
        run: |
          URL=$(curl -s http://localhost:4040/api/tunnels \
                | jq -r '.tunnels[0].public_url')
          echo "NGROK_URL=$URL" >> $GITHUB_ENV

      - name: 🧪 Test Backend endpoint
        run: |
          curl -X POST "$NGROK_URL/generate_qcm" \
            -H "Authorization: Bearer ${{ secrets.API_SECRET_TOKEN }}" \
            -H "X-GitHub-Author: github-actions" \
            -H "Content-Type: application/json" \
            -d '{"code_block":"print(\"Hello\")"}'
      - name: 🧾 Afficher QCM généré (JSON)
        if: always()
        run: |
          echo "--- QCM History ---"
          head -n 5 db/qcm_history.json || echo "Pas encore de QCM généré"

      - name: 📂 Lister fichiers PDF générés
        if: always()
        run: ls -lh static/qcm_pdfs || true

      # ──────────── Frontend ────────────
      - name: 🔗 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: 📆 Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: 🛠️ Write Angular env
        working-directory: frontend
        run: |
          cat > src/environments/environment.ts <<EOF
          export const environment = {
            production: false,
            apiUrl: '${{ env.NGROK_URL }}/generate_qcm',
            apiToken: '${{ secrets.API_SECRET_TOKEN }}'
          };
          EOF

      - name: 🛠️ Write Angular env.prod
        working-directory: frontend
        run: |
          cat > src/environments/environment.prod.ts <<EOF
          export const environment = {
            production: true,
            apiUrl: '${{ env.NGROK_URL }}/generate_qcm',
            apiToken: '${{ secrets.API_SECRET_TOKEN }}'
          };
          EOF

      - name: 🔨 Build Angular
        working-directory: frontend
        run: npm run build --if-present

      - name: ✅ Smoke-test frontend HTTP call
        working-directory: frontend
        run: |
          # lance vite preview ou un petit script node pour appeler l'API
          echo "console.log('smoke')"

      # ────────── Logs ──────────
      - name: 📄 Dump logs
        if: always()
        run: |
          echo "---- Flask ----" && head -n50 flask.log || true
          echo "---- ngrok ----" && head -n50 ngrok.log  || true
