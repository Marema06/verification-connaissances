name: CI with Ollama (CPU Mode)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. Installer Ollama (CPU)
      - name: Install Ollama (CPU Mode)
        run: |
          curl -fsSL https://ollama.com/install.sh | OLLAMA_NOBLAS=1 sh
          echo "OLLAMA_NOBLAS=1" >> $GITHUB_ENV
          echo "HOME=/github/home" >> $GITHUB_ENV

          nohup ollama serve > ollama.log 2>&1 &
          echo $! > ollama.pid

          for i in {1..20}; do
            if curl -s localhost:11434 >/dev/null; then
              echo "Ollama ready after $i attempts"
              break
            fi
            echo "Waiting for Ollama ($i/20)..."
            sleep 5
          done

          if [ $i -eq 20 ]; then
            echo "ERROR: Ollama failed to start"
            cat ollama.log
            exit 1
          fi

      # 2. Télécharger modèle
      - name: Download CPU-optimized model
        run: |
          ollama pull tinyllama
          ollama list

      # 3. Setup Python / Flask
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Démarrer Flask backend sans gunicorn
      - name: Start Flask (dev mode, sans gunicorn)
        env:
          OLLAMA_BASE_URL: "http://localhost:11434"
          OLLAMA_MODEL: "tinyllama"
          FLASK_APP: backend/app.py
          FLASK_RUN_HOST: 0.0.0.0
          FLASK_RUN_PORT: 5000
          PYTHONUNBUFFERED: 1
        run: |
          echo "Starting Flask in background..."
          nohup python -m flask run > flask.log 2>&1 &
          echo $! > flask.pid

          for i in {1..30}; do
            if ! ps -p $(cat flask.pid) > /dev/null; then
              echo "ERROR: Flask process died"
              cat flask.log
              exit 1
            fi

            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/healthz | grep -q 200; then
              echo "Flask ready after $i seconds"
              break
            fi
            echo "Waiting for Flask ($i/30)..."
            sleep 2
          done

          if [ $i -eq 30 ]; then
            echo "ERROR: Flask startup timeout"
            cat flask.log
            exit 1
          fi

      # 5. Vérifier connexions
      - name: Verify Connections
        run: |
          echo "=== Active Processes ==="
          ps aux | grep -E 'ollama|flask'

          echo "=== Ollama Status ==="
          curl -v http://localhost:11434/api/tags || echo "Ollama check failed"

          echo "=== Flask Debug Endpoint ==="
          curl -v http://localhost:5000/debug || echo "Debug endpoint failed"

      # 6. Détecter les fichiers modifiés
      - name: Detect modified code files
        id: detect-changes
        run: |
          git fetch origin main
          FILES=$(git diff --name-only origin/main HEAD | grep -E '\.py$|\.ts$|\.js$' || true)
          FILES_CLEAN=$(echo "$FILES" | tr '\n' ' ' | xargs)
          echo "Modified files: $FILES_CLEAN"
          echo "files=$FILES_CLEAN" >> $GITHUB_OUTPUT

      # 7. Debug temporaire pour afficher la variable
      - name: Debug detected files
        run: |
          echo "Files detected:"
          echo "${{ steps.detect-changes.outputs.files }}"

      # 8. Envoyer fichiers au backend Flask pour générer les QCM
      - name: Generate QCMs with Flask
        if: steps.detect-changes.outputs.files != ''
        run: |
          for file in ${{ steps.detect-changes.outputs.files }}; do
            echo "Sending $file to Flask backend..."
            CONTENT=$(cat $file | jq -Rs .)
            curl -X POST http://localhost:5000/generate_qcm \
              -H "Content-Type: application/json" \
              -d "{\"filename\": \"$file\", \"code_block\": $CONTENT, \"author\": \"etudiant1\"}"
          done

      # 9. Stopper les services
      - name: Stop services
        if: always()
        run: |
          echo "=== Cleaning up ==="

          if [ -f flask.pid ]; then
            echo "Stopping Flask..."
            kill -9 $(cat flask.pid) 2>/dev/null || true
            rm -f flask.pid
          fi

          if [ -f ollama.pid ]; then
            echo "Stopping Ollama..."
            kill -9 $(cat ollama.pid) 2>/dev/null || true
            rm -f ollama.pid
          fi

          pkill -f "ollama serve" 2>/dev/null || true
          pkill -f "flask" 2>/dev/null || true

      # 10. Upload logs pour debug
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: |
            ollama.log
            flask.log
